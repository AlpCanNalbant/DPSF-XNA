=====================================================================
This document should show all of the technical changes to DPSF (private), 
as well as the larger changes that the users should be aware of (public)
=====================================================================
Changes made after Version 1.6.0:
public:
- Fixed bug in Particle System Manager where exception would be thrown by the manager if a particle system removed itself from the manager from within its Update() function.
- Fixed bug where Emitters would still emit particles when their Enabled property was set to false.


Changes made after Version 1.5.5.0:
public:
- Changed particle system's IsInitialized() function into IsInitialized property.
- Fixed bug where particles wouldn't linearly interpolate (Lerp) between the emitter's previous and current position and orientation when it was moved
    manually (i.e. not with it's own acceleration/velocity properties).
- Added particle system properties LerpEmittersPositionAndOrientation and LerpEmittersPositionAndOrientationOnNextUpdate to control emitter Lerping.
- Added static DPSFDefaultSettings class to be used to set the default values to use for all DPSF particle systems when they are initialized.
- Added CopyFrom() function and Copy constructor to Emitter and AutoMemoryManagerSettings classes.
- Fixed bug in ParticleSystemManager's CopyFrom() function.

private:
- Added SetCameraPosition() function to template files that were missed.
- Fixed template files that were not displaying particles.


Changes made after Version 1.5.4.0:
public:
- Added logic to more properly handle drawing too many particles on the Xbox 360, instead of throwing an exception.
- Added performance optimizations.
- Gave assemblies a strong name.
- Added virtual function SetCameraPosition() that may be overridden when not inheriting from the default DPSF particle system classes 
	and will still work with the ParticleSystemManager.SetCameraPositionForAllParticleSystems() function.
- Updated help documentation.


Changes made after Version 1.5.3.0:
public:
- Changed install directory to be "DPSF (XNA 3.1)", rather than "DPSF" so that XNA 4 DPSF version can install to "DPSF".
- Fixed minor memory leak in the Particle System Manager when removing particle systems.
- SpriteBatchSettings now throws exception if trying to access it when not using a Sprite particle system.
- Added SpriteBatch parameter to the InitializeSpriteParticleSystem() functions to allow users to draw particle systems
	using their own SpriteBatches, instead of every particle system using its own. Also included a new
	UsingExternalSpriteBatchToDrawParticles property that tells at run-time if the particle system uses its own SpriteBatch or not.
- Added SpriteBatch parameter to the AutoInitialize() function to easily pass in an external Sprite Batch to use to
	draw Sprite particle systems.


Changes made after Version 1.5.2.0:
public:
- Fixed bug in Quad and Textured Quad particle systems where the texture was being drawn in reverse (upside down and mirrored).


Changes made after Version 1.5.1.0:
public:
- Fixed enormous amount of garbage being created when using a Sprite type particle system, causing the garbage collector to run very often.


Changes made after Version 1.5.0.0:
public:
- Added SourceToTargetVector() and SourceToTargetDirection() functions to DPSFHelper.
- Added SetCameraPositionForAllParticleSystems() function to the Particle System Manager class.
- Reduced memory footprint of the Draw() function.
- Fixed exceptions that would be thrown when a particle system Destroyed itself.
- Added Particle Update functions to the Quad particle systems to constrain a particle around a specific axis (i.e. X, Y, or Z).


Changes made after Version 1.4.0.0:
public:
- Added check to make sure .NET Framework 3.5 or greater and XNA 3.1 are installed on the client's machine before running the DPSF Demo, and
	now displays a nice warning message if they are not installed.
- Catch and throw new exception when calling SetTexture() in the case that the texture you are loading has already been Dispose()'d.
- Fixed bug in Default Quad particle systems where particles with a size less than 2 would not be displayed.
- Now throw descriptive exceptions when properties try to be used before the particle system has been initialized.
- Added Size, StartSize, and EndSize properties to the Default Sprite and Quad Particles, which simply set the Width and Height properties.
- Updated help documentation a bit.
- Plastered the [Serializable] attribute everywhere to make DPSF serializable.
- Now throw more descriptive exceptions from the Particle System Manager class.
- Added DPSFDefaultEffectTechniques enumeration which specifies all of the available Techniques for the DPSFDefaultEffect.
- Added extra functions to the default particles.
- Fixed bug in ParticleSystemManager.RemoveAllParticleSystems() function that would cause an invalid index exception to be thrown.
- Fixed bug in ParticleSystemManager.DrawAllParticleSystems() function to draw particle systems in the correct order.
- Made all Particle and ParticleSystem Update Functions protected instead of public to promote particle system encapsulation and removed extra
	exposed functions that should not be used from users.
- Added explosion particle systems to the DPSF Demo.
- Included the DPSFDefaults.cs file used by DPSF for others to modify if wanted and to learn from.

private:
- Added null checks to CParticleSystemManager when adding new Particle Systems.


Changes made after Version 1.3.1.0:
public:
- Added a FPSLogger class to the FPS.cs file included in the DPSF Demo project. This allows the FPS to be logged to a file.
- Added overloaded Initialize...ParticleSystem() functions to allow a Texture2D to be specified instead of a texture asset name string.
- Changed the Magnets class, adding MagnetPoint, MagnetLine, MagnetLineSegment, and MagnetPlane classes.
- Added DefaultSpriteTextureCoordinatesParticleSystem and DefaultTexturedQuadTextureCoordinatesParticleSystem classes for when texture 
	coordinates are required (not for animated particles), as well as the associated Particle classes and Particle Vertex structs.
- Added DefaultPointSpriteTextureCoordinatesParticleSystem, DefaultPointSpriteTextureCoordinatesNoRotationParticleSystem, and
	DefaultPointSpriteTextureCoordinatesNoColorParticleSystem classes, as well as associated Particle classes, Particle Vertex
	structs, and Effect file techniques.  Three classes are provided because the the NoRotation and NoColor classes run considerably
	faster than the DefaultPointSpriteTextureCoordinatesParticleSystem, as extra operations must be performed in the shaders to support
	both Color and Rotation when also using Texture Coordinates for Point Sprites. So if Texture Coordinates are required, but not
	both Color (including transparency) and Rotation, it is better to use the corresponding NoRotation or NoColor particle system classes.
- Added DefaultAnimatedPointSpriteParticleSystem, DefaultAnimatedPointSpriteNoRotationParticleSystem, and
	DefaultAnimatedPointSpriteNoColorParticleSystem classes, as well as assocatiated Particle classes and Particle Vertex structs.
- Added MultipleParticleImagePS particle system to DPSF demo to show how one particle system can be used to display many different particle images.


Changes made after Version 1.3.0.0:
public:
- Updated to be compatible with XNA Game Studio 3.1.
- Added inner exception output to exceptions thrown when initializing particle systems.
- Changed the SherePS particle system to use the Particle texture.
- Fixed formula for calculating the row, column, and layer a particle is at in the Grid particle systems.
- Now throws an exception when trying to Draw on the XBox 360 with a vertex buffer that is too large.

private:
- Slightly changed the code in DPSF.AddParticle() when deciding if more memory should be allocated or not.


Changes made after Version 1.2.0.0:
public:
- Fixed bug in DPSFHelper.RandomNormalizedVector() function where it only returned positive vectors.
- Renamed Emitter.EmitParticles property to Emitter.EmitParticlesAutomatically.
- Added Emitter.Enabled property.
- Added Emitter.BurstParticles and Emitter.BurstTime properties to release particles in bursts.
- Renamed UpdateParticleSystemTurnEmitterOn/Off() functions to UpdateParticleSystemEmitParticlesAutomaticallyOn/Off().
- Added UpdateParticleSystemEnableEmitter() and UpdateParticleSystemDisableEmitter() particle system update functions to the Default classes.
- Fixed bug where an "index out of range" exception would be thrown when removing Events from within an Event function.
- Renamed MultipleChangeParticleSystem.cs to SquarePatternParticleSystem.cs and changed some of its functions.
- Formatted a lot of the XML documentation better.
- Fixed bug in DPSFDefaultEffect.fx which caused Point Sprites to be displayed smaller when their rotation was zero.
- Created first 5 tutorials in the Help Documentation.


Changes made after Version 1.1.1.0:
public:
- Changed what happens a little bit when a particle is in the exact same position as a magnet affecting it,
	so now the particle is only pushed in a random direction if the magnet is repelling it (not attracting it).
- Renamed the DefaultParticleSystemMagnet.DistanceFunctions enumeration's value "SameForceAtAllDistances" to "Constant".
- Added Grid particle system to Demo.
- Added Sphere particle system to Demo.
- Fixed bug where exception would be thrown when reducing the NumberOfParticlesAllocatedInMemory to less than
	what was currently in the particle system already.
- Added global variable miPARTICLE_SYSTEM_UPDATES_PER_SECOND to GameMain.cs to control how often the particle systems
	are updated.
- Fixed bug in the ParticleSystemManager.AutoInitializeAllParticleSystems() function where not all Particle Systems
	were being initialized.
- Added DPSFHelper.RandomNumberBetween(min, max) function for returning random numbers in a given range.
- Changed the Default Point Sprite and Quad Particle System classes and Templates to reset the RenderState's 
	AlphaBlendEnable and AlphaTestEnable properties to false after Draw() is called.
- Added SimulationSpeed and UpdatesPerSecond properties to the individual particle systems, and changing the Particle
	System Manager's SimulationSpeed / UpdatesPerSecond now sets the individual particle systems' properties.
- Changed the SimulationSpeed and UpdatesPerSecond properties to work the same when inheriting from
	DrawableGameComponent or not.
- Added ParticleSystemManagerToCopyPropertiesFrom property to the particle systems (Copies SimulationSpeed and UpdatesPerSecond).
- Added a NoDisplay Particle Type that can offer better performance for particle systems that do not need to be
	visualized (i.e. drawn to the screen), such as for some research applications.
- Added a RandomNumbers class that inherits the Random class and adds more functionality.
- Replaced the PointOnVertical/HorizontalCircle() functions in DPSFHelper with more generic PointOnSphere() functions.

private:
- Added new event functions to the Particle System Manager so when a Particle System's Update or Draw Order is changed,
	the Particle System Lists are not resorted right away, they are resorted before performing the next Update / Draw.
- Changed the InitializeCommonVariables() function so the Update and Draw Orders are not reset to zero.
- Made the VertexElement property private.


Changes made after Version 1.1.0.0:
public:
- Fixed bug where a particle would be given an invalid position when it was in the exact same position 
	as a magnet affecting it.
- Added global boolean values to GameMain.cs to turn building an Animated GIF and TileSetImage on/off
	when building images from an animation.
- Added a null check to the DPSF.GraphicsDevice property
